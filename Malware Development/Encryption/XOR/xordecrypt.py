import sys
import re

def parse_c_array(c_array_str):
    # Extract hex values from C-style array string
    hex_values = re.findall(r'0x[0-9A-Fa-f]{2}', c_array_str)
    return [int(h, 16) for h in hex_values]

def decrypt_shellcode(ciphertext_str, key_str):
    # Parse the input C-style arrays
    ciphertext = parse_c_array(ciphertext_str)
    key = parse_c_array(key_str)

    # Validate lengths
    if len(ciphertext) != len(key):
        print("Error: Ciphertext and key lengths do not match.")
        sys.exit(1)

    # Decrypt shellcode using XOR
    decrypted_shellcode = bytearray()
    for c, k in zip(ciphertext, key):
        decrypted_shellcode.append(c ^ k)

    # Format decrypted shellcode as C-style array
    hex_values = [f"0x{byte:02X}" for byte in decrypted_shellcode]
    formatted_output = "unsigned char Shellcode[] = {\n"
    for i in range(0, len(hex_values), 16):
        line = hex_values[i:i+16]
        formatted_output += "\t" + ", ".join(line) + ",\n"
    formatted_output = formatted_output.rstrip(",\n") + " };"

    return formatted_output

def main():
    if len(sys.argv) != 3:
        print("Usage: python decrypt_shellcode.py <ciphertext_file> <key_file>")
        sys.exit(1)

    ciphertext_file = sys.argv[1]
    key_file = sys.argv[2]

    # Read the ciphertext and key from files
    try:
        with open(ciphertext_file, 'r') as f:
            ciphertext_str = f.read()
        with open(key_file, 'r') as f:
            key_str = f.read()
    except FileNotFoundError as e:
        print(f"Error: File {e.filename} not found.")
        sys.exit(1)
    except Exception as e:
        print(f"Error reading file: {e}")
        sys.exit(1)

    # Decrypt and output the result
    decrypted_shellcode = decrypt_shellcode(ciphertext_str, key_str)
    print("Decrypted Shellcode:")
    print(decrypted_shellcode)

if __name__ == "__main__":
    main()
