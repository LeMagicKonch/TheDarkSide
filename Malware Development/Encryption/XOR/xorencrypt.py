import os
import sys
import secrets

def encrypt_shellcode(bin_file_path, input_key=None):
    # Read the shellcode from the .bin file
    try:
        with open(bin_file_path, 'rb') as f:
            shellcode = f.read()
    except FileNotFoundError:
        print(f"Error: File {bin_file_path} not found.")
        sys.exit(1)
    except Exception as e:
        print(f"Error reading file: {e}")
        sys.exit(1)

    # Generate a random key if none provided, else use input key
    if input_key is None:
        key = secrets.token_bytes(len(shellcode))
    else:
        key = input_key.encode()
        if len(key) < len(shellcode):
            print("Error: Key length must be at least as long as the shellcode.")
            sys.exit(1)
        key = key[:len(shellcode)]  # Truncate key to shellcode length if longer

    # Encrypt shellcode using XOR
    encrypted_shellcode = bytearray()
    for s, k in zip(shellcode, key):
        encrypted_shellcode.append(s ^ k)

    # Format the encrypted shellcode as C-style array
    hex_values = [f"0x{byte:02X}" for byte in encrypted_shellcode]
    formatted_shellcode = "unsigned char CipherText[] = {\n"
    for i in range(0, len(hex_values), 16):
        line = hex_values[i:i+16]
        formatted_shellcode += "\t" + ", ".join(line) + ",\n"
    formatted_shellcode = formatted_shellcode.rstrip(",\n") + " };"

    # Format the key as C-style array
    key_hex_values = [f"0x{byte:02X}" for byte in key]
    formatted_key = "unsigned char Key[] = {\n"
    for i in range(0, len(key_hex_values), 16):
        line = key_hex_values[i:i+16]
        formatted_key += "\t" + ", ".join(line) + ",\n"
    formatted_key = formatted_key.rstrip(",\n") + " };"

    return formatted_key, formatted_shellcode

def main():
    if len(sys.argv) < 2 or len(sys.argv) > 3:
        print("Usage: python encrypt_shellcode.py <bin_file_path> [key]")
        sys.exit(1)

    bin_file_path = sys.argv[1]
    input_key = sys.argv[2] if len(sys.argv) == 3 else None

    formatted_key, formatted_shellcode = encrypt_shellcode(bin_file_path, input_key)

    print("Key used:")
    print(formatted_key)
    print("\nEncrypted Shellcode:")
    print(formatted_shellcode)

if __name__ == "__main__":
    main()
